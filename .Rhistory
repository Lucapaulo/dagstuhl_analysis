library(data.table)
DT <- data.table(x = rep(c("a","b","c"), each = 3), y = c(1, 3, 6), v = 1:9)
DT
nrow(DT)
ncol(DT)
source('~/.active-rstudio-document', echo=TRUE)
DT[2]
DT[1]
DT[3:5]
DC[c(3,4)]
DT[c(3,4)]
DT
DT[c(3,4,7)]
iris_dt <- as.data.table(iris)
iris_dt
summary(iris_dt)
iris_dt[Species == "setosa"]
iris_dt[Species == "setosa"][1:2]
iris_dt[Species == "setosa"][c(1,3,5)]
iris_dt[Species == "setosa"][Petal.Length < 1.3]
iris_dt[Species == "setosa"][Petal.Length < 1.3][Sepal.Width >3.2]
iris_dt[Species == "setosa" & Petal.Length < 1.3][Sepal.Width >3.2]
iris_dt[Species == "setosa" & Petal.Length < 1.3 & 1:2][Sepal.Width >3.2]
iris_dt[Species == "setosa" & Petal.Length < 1.3 & 1][Sepal.Width >3.2]
iris_dt[Species == "setosa" & Petal.Length < 1.3 & 1:1][Sepal.Width >3.2]
iris_dt[Species == "setosa" & Petal.Length < 1.3][Sepal.Width >3.2][1:1]
iris_dt[Species == "setosa" & Petal.Length < 1.3][Sepal.Width >3.2][1]
DT[, x]
DT
DT[, y]
DT[4, y]
with(DT, y*v)
DT[, y*v]
DT[1:2, list(x,y)]
clas(DT[1:2, list(x,y)])
class(DT[1:2, list(x,y)])
iris_dt[Species == "virginica", mean(Petal.Length)]
iris_dt[Species == "virginica", list(mean(Petal.Length), median(Petal.Length)]
iris_dt[Species == "virginica", list(mean(Petal.Length), median(Petal.Length))]
iris_dt[Species == "virginica", .(mean(Petal.Length), median(Petal.Length))]
iris_dt[Species == "virginica", .(mean_PL = mean(Petal.Length), median_PL = median(Petal.Length))]
iris_dt[Species == "virginica", list(mean_PL = mean(Petal.Length), median_PL = median(Petal.Length))]
sapply(iris_dt, class)
lapply(iris_dt, class)
sapply(iris_dt[,list(Sepal.Length, Petal.Length)], sum)
sapply(iris_dt[, -'Species'], sum)
sapply(iris_dt[, -'Species' -'Petal.Width'], sum)
sapply(iris_dt[, -'Species' & -'Petal.Width'], sum)
sapply(iris_dt[, -'Species, Petal.Width'], sum)
sapply(iris_dt[, -'Species'-'Petal.Width'], sum)
DT[, c(mean_y = mean(y), mean_v = mean(v))]
iris_dt[, .(mean_PL = mean(Petal.Length)), by=Species]
iris_dt[, .N, by=Species]
iris_dt[Sepal.Length > 3 , .N, by=Species]
iris_dt[Sepal.Length > 30 , .N, by=Species]
iris_dt[Sepal.Length > 10 , .N, by=Species]
iris_dt[Sepal.Length > 6 , .N, by=Species]
iris_dt[Sepal.Length > 5 , .N, by=Species]
iris_dt
iris_dt[.N, 1:3, by=Species]
DT[, yv := y+v][1:3]
DT
iris_dt[, `:=` (Sepal.Area = Sepal.Length * Sepal.Width, Petal.Area = Petal.Length * Petal.Width)]
iris_dt
iris_dt[Species == "setosa", color := "orange"]
iris_dt
iris_dt[Species == "versicolor", color := "purple"]
iris_dt[Species == "virginica", color := "pink"]
unique(iris_dt[, .(Species, color)])
iris_dt[, color := NULL]
iris_dt
copy_DT <- copy(DT)
copy_DT
DT
View(DT)
iris_copy <- copy(iris_dt)
iris_copy[, := (Petal.Mean = mean(Petal.Length)), by=Species]
iris_copy[, Petal.Mean := mean(Petal.Length), by=Species]
iris_copy
iris_copy[, Petal.Square := (Petal.Length - Petal.Mean) ^ 2]
iris_copy
iris_copy[, Square.Sum := sum(Petal.Square), by=Species]
iris_copy
iris_copy[, Occurences := .N, by=Species]
iris_copy
iris_copy[, s := sqrt(1/(Occurences-1) * sum(Square.Sum)), by=Species]
iris_copy[, sd := sd(Petal.Length), by=Species]
iris_copy
iris_copy[, s := sqrt(1/(Occurences-1) * sum(Square.Sum))]
iris_copy
iris_copy[, identical(s, sd)]
iris_copy[, Petal.Mean := mean(Petal.Length), by=Species]
iris_copy[, Petal.Square := (Petal.Length - Petal.Mean) ^ 2]
iris_copy[, Square.Sum := sum(Petal.Square), by=Species]
iris_copy[, Occurences := .N, by=Species]
iris_copy[, s := sqrt(1/(Occurences-1) * sum(Square.Sum))]
iris_copy[, sd := sd(Petal.Length), by=Species]
iris_copy[, identical(s, sd)]
iris_copy
iris2 = copy(iris_dt)
iris2[, mean_PL := mean(Petal.Length), by = Species]
iris2[, dif_squared := (Petal.Length - mean_PL)^2]
iris2[, sum_squares := sum(dif_squared), by = Species]
iris2[, N := .N, by = Species]
iris2[, sd_mine := sqrt(1/(N-1)*sum_squares)]
iris2[, sd := sd(Petal.Length), by = Species]
iris2[, identical(sd_mine, sd)]
iris2
iris_copy[, s := sqrt(1/(Occurences-1) * Square.Sum)]
iris_copy[, sd := sd(Petal.Length), by=Species]
iris_copy[, identical(s, sd)]
DT[, order(y)]
DT[order(y)]
copy_DT <- DT[order(y)]
setorder(DT, y)
setorder(DT, -y)
DT
( dt1 <- data.table(p_id = c("G008", "F027", "L051"), value = rnorm(3)) )
dt1
( dt2 <- data.table(p_id = c("G008", "F027", "U093"), country = c("Germany", "France", "USA")) )
m <- merge(dt1, dt2, by = "p_id", all=FALSE)
m
# inner merge
m <- merge(dt1, dt2, by = "p_id", all=FALSE, sort=FALSE)
m
# outer merge
merge(dt1, dt2, by="p_id", all=TRUE)
# left merge
merge(dt1, dt2, by="p_id", all.x = TRUE)
# right  merge
merge(dt1, dt2, by="p_id", all.y = TRUE)
m
dt1
(dt1 <- data.table(firstname = c("Alice", "Alice", "Bob"), lastname = c("Coop", "Smith", "Smith"), x=1:3))
(dt2 <- data.table(firstname = c("Alice", "Bob", "Bob"), lastname = c("Coop", "Marley", "Smith"), y=LETTERS[1:3]))
merge(dt1,dt2, by=c("firstname", "lastname"))
merge(dt1, dt2, by="firstname")
DT
DT[, .SD, by = x]
iris_dt[, SD[1], by=Species]
iris_dt[, .SD[1], by=Species]
iris_dt[, .SD[which.min(Petal.Length)], by=Species]
iris_dt[, .SD[which(Petal.Length > 3)], by=Species]
iris_dt[, .SD[which(Petal.Length > 6)], by=Species]
iris_dt[, lapply(.SD, sum), by=Species]
iris_dt[, lapply(.SD, sum), by = Species, .SDcols=c("Sepal.Length", "Sepal.Width")]
iris_dt[ , lapply(.SD, sum), .SDcols = -"Species"]
iris_dt[, lapply(.SD, sum), by = Species, .SDcols = grep("Sepal", colnames(iris_dt), value = T)]
source('~/.active-rstudio-document', echo=TRUE)
table5
table4a
print(table4a)
table4a %>% data.table::meld(id.vars = "country",
measure.vars = c("1999", "2000"),
variable.name = "year",
value.name = "cases")
table4a %>% data.table::melt(id.vars = "country",
measure.vars = c("1999", "2000"),
variable.name = "year",
value.name = "cases")
data.table::dcast(table2, ... ~ type,
value.var = "count")
seperate(table3, col = rate, into = c("cases", "population"), sep = "\\/")
separate(table3, col = rate, into = c("cases", "population"), sep = "\\/")
unite(table5, col = new, century, year, sep = "")
ggplot(germans, aes(start_date, german_rate)) +
geom_line(aes(colour = german_rate), show.legend = FALSE) +
labs(title = "Percentage of German Participants per Dagstuhl Seminar from 2001 to 2019",
x = "Year",
y = "Rate of Germans") +
geom_smooth(data=germans %>% group_by(start_date) %>% summarise(german_rate=sum(german_rate)),
aes(x = start_date, y = german_rate, group=1),
method = "lm", se= FALSE, color = "firebrick1", size = 1) +
scale_y_continuous(expand = c(0.01,0.01))
library(data.table)
library(ggplot2)
library(RColorBrewer)
library(dplyr)
library(lubridate)
library(tidyr)
library(xts)
setwd("~/Documents/dagstuhl/dagstuhl_analysis")
# import data and convert to data tables
co2 <- read.csv("./csvs/co2.csv")
co2_dt <- as.data.table(co2)
participants <- read.csv("./csvs/participants.csv")
participants_dt <- as.data.table(participants)
seminars <- read.csv("./csvs/seminars.csv")
seminars_dt <- as.data.table(seminars)
# correct dates on seminars_dt
seminars_dt[ , "date" := lapply(.SD, gsub, pattern = "^(\\S*\\s+\\S+).*", replacement = "\\1"), .SDcols = "date"]
seminars_dt <- unite(seminars_dt, col = start_date, date, year, sep = " ")
seminars_dt[ , "start_date" := lapply(.SD, mdy), .SDcols = "start_date"]
seminars_dt[ , "start_date" := lapply(.SD, as.POSIXct), .SDcols = "start_date"]
# fix one weird value
seminars_dt[seminar_id == 10519]$start_date <- seminars_dt[seminar_id == 10519]$start_date - 284212568
seminars_dt$start_date <- make.index.unique(seminars_dt$start_date, eps = 1, drop = FALSE)
# participants per seminar
x <- participants_dt[, nrow(.SD), by=seminar_id]
setnames(x, "V1", "participants")
x <- merge(x, seminars_dt[, c("seminar_id", "start_date")], all.x = TRUE)
# participants chronological
ggplot(x, aes(start_date, participants)) +
geom_line(aes(colour = participants), stat = "identity", show.legend = FALSE) +
labs(title = "# of Participants in Dagstuhl Seminars from 2001 to 2019",
x = "Year",
y = "# of Participants") +
scale_colour_gradient(low = "white", high = "black") +
geom_smooth(data=x %>% group_by(start_date) %>% summarise(participants=sum(participants)),
aes(x = start_date, y = participants, group=1),
method = "lm", se= FALSE, color = "firebrick1", size = 1) +
scale_y_continuous(expand = c(0.01,0.01))
# CDF
ggplot(x, aes(participants)) +
geom_line(aes(y=..y..), stat="ecdf") +
ggtitle("CDF of Participants per Seminar") +
ylab("CDF") +
scale_y_continuous(expand = c(0.01,0.01))
# co2 tons per seminar
y <- merge(participants_dt[, c("seminar_id", "country")], co2_dt, all.x=TRUE)
y$country <- NULL
y <- y[, .(co2=sum(tons)), by=seminar_id]
y <- merge(y, seminars_dt[, c("seminar_id", "start_date")], by.x="seminar_id", by.y="seminar_id")
# co2 tons chronological
ggplot(y, aes(start_date, co2)) +
geom_line(aes(colour = co2), stat = "identity", show.legend = FALSE) +
labs(title = "Tons of CO² per Dagstuhl Seminar from 2001 to 2019",
x = "Year",
y = "Tons of CO²") +
scale_colour_gradient(low = "white", high = "black") +
geom_smooth(data=y %>% group_by(start_date) %>% summarise(co2=sum(co2)),
aes(x = start_date, y = co2, group=1),
method = "lm", se= FALSE, color = "firebrick1", size = 1) +
scale_y_continuous(expand = c(0.01,0.01))
# seminars by co2 tons
ggplot(y, aes(reorder(seminar_id, -co2), co2)) +
geom_bar(aes(colour = co2), stat = "identity", show.legend = FALSE) +
theme(axis.text.x=element_blank(),
axis.ticks.x=element_blank()) +
labs(title = "Tons of CO² per Dagstuhl Seminar (Ordered by Quantity)",
x = "Seminar",
y = "Tons of CO²") +
scale_colour_gradient(low = "white", high = "black") +
scale_y_continuous(expand = c(0.01,0.01))
# mixed
z <- merge(x[, c("seminar_id", "participants")], y)
ggplot(z, aes(x=start_date)) +
geom_line(aes(y = participants, group = 1, colour = "Participants")) +
geom_line(aes(y = co2, group = 1, colour = "CO²")) +
scale_y_continuous(expand = c(0.01,0.01), sec.axis = sec_axis(~.*1, name = "Tons of CO²")) +
scale_colour_manual(values = c("red", "dodgerblue")) +
labs(x = "Year",
y = "# of Participants",
colour = "Legend",
title = "# of Participants and Carbon Footprint in Dagstuhl Seminars") +
geom_smooth(data=z %>% group_by(start_date) %>% summarise(co2=sum(co2)),
aes(x = start_date, y = co2, group=1),
method = "lm", se= FALSE, color = "red3", size = 1) +
geom_smooth(data=z %>% group_by(start_date) %>% summarise(participants=sum(participants)),
aes(x = start_date, y = participants, group=1),
method = "lm", se= FALSE, color = "dodgerblue3", size = 1) +
theme(legend.position = c(0.9, 0.9))
# rate of german participants
germans <- participants_dt[, .(ger=sum(country=="DE")), by=seminar_id]
germans <- merge(x[, c("seminar_id", "participants")], germans)
germans[, german_rate := ( ger / participants)]
germans <- merge(germans[, c("seminar_id", "german_rate")], seminars_dt[, c("seminar_id", "start_date")])
ggplot(germans, aes(start_date, german_rate)) +
geom_line(aes(colour = german_rate), show.legend = FALSE) +
labs(title = "Percentage of German Participants per Dagstuhl Seminar from 2001 to 2019",
x = "Year",
y = "Rate of Germans") +
geom_smooth(data=germans %>% group_by(start_date) %>% summarise(german_rate=sum(german_rate)),
aes(x = start_date, y = german_rate, group=1),
method = "lm", se= FALSE, color = "firebrick1", size = 1) +
scale_y_continuous(expand = c(0.01,0.01))
# rate of german participants
germans <- participants_dt[, .(ger=sum(country=="DE" || country=="AT")), by=seminar_id]
# rate of german participants
origins <- participants_dt[, .(dach=sum(country=="DE" || country=="AT" || country="CH")), by=seminar_id]
# rate of german participants
origins <- participants_dt[, .(dach=sum(country=="DE" || country=="AT" || country=="CH")), by=seminar_id]
origins
# rate of german participants
origins <- participants_dt[, .(dach=sum(country=="DE" or country=="AT" or country=="CH")), by=seminar_id]
# rate of german participants
origins <- participants_dt[, .(dach=sum(country=="DE" & country=="AT" & country=="CH")), by=seminar_id]
origins
# rate of german participants
origins <- participants_dt[, .(dach=sum(country=="DE" | country=="AT" | country=="CH")), by=seminar_id]
origins
germans
origins
# rate of german participants
origins <- participants_dt[, .(dach=sum(country=="DE" | country=="AT" | country=="CH"), us=sum(country=="US")), by=seminar_id]
origins
# rate of german participants
origins <- participants_dt[, .(dach=sum(country=="DE" | country=="AT" | country=="CH"), na=sum(country=="US" | country=="CA")), by=seminar_id]
origins <- merge(x[, c("seminar_id", "participants")], origins)
# rate of german participants
origins <- participants_dt[, .(dach=sum(country=="DE" | country=="AT" | country=="CH"), na=sum(country=="US" | country=="CA")), by=seminar_id]
origins <- merge(x[, c("seminar_id", "participants")], origins)
origins[, dach_rate := ( dach / participants)]
origins[, na_rate := (na / participants)]
origins <- merge(origins[, c("seminar_id", "dach_rate", "na_rate")], seminars_dt[, c("seminar_id", "start_date")])
origins
ggplot(origins, aes(x=start_date)) +
geom_line(aes(y = dach_rate, group = 1, colour = "DACH")) +
geom_line(aes(y = na_rate, group = 1, colour = "NA")) +
labs(title = "Percentage of DACH vs NA Participants per Dagstuhl Seminar from 2001 to 2019",
x = "Year",
y = "% of Participants") +
scale_colour_manual(values = c("red", "dodgerblue")) +
geom_smooth(data=origins %>% group_by(start_date) %>% summarise(dach_rate=sum(dach_rate)),
aes(x = start_date, y = dach_rate, group=1),
method = "lm", se= FALSE, color = "red3", size = 1) +
geom_smooth(data=origins %>% group_by(start_date) %>% summarise(na_rate=sum(na_rate)),
aes(x = start_date, y = na_rate, group=1),
method = "lm", se= FALSE, color = "dodgerblue3", size = 1) +
scale_y_continuous(expand = c(0.01,0.01))
ggplot(origins, aes(x=start_date)) +
geom_line(aes(y = dach_rate, group = 1, colour = "DACH")) +
geom_line(aes(y = na_rate, group = 1, colour = "NA")) +
labs(title = "Percentage of DACH vs NA Participants per Dagstuhl Seminar from 2001 to 2019",
x = "Year",
y = "% of Participants",
colour = "Legend") +
scale_colour_manual(values = c("red", "dodgerblue")) +
geom_smooth(data=origins %>% group_by(start_date) %>% summarise(dach_rate=sum(dach_rate)),
aes(x = start_date, y = dach_rate, group=1),
method = "lm", se= FALSE, color = "red3", size = 1) +
geom_smooth(data=origins %>% group_by(start_date) %>% summarise(na_rate=sum(na_rate)),
aes(x = start_date, y = na_rate, group=1),
method = "lm", se= FALSE, color = "dodgerblue3", size = 1) +
scale_y_continuous(expand = c(0.01,0.01))
# rate of german participants
origins <- participants_dt[, .(dach=sum(country=="DE" | country=="AT" | country=="CH"), na=sum(country=="US" | country=="CA")), by=seminar_id]
origins <- merge(x[, c("seminar_id", "participants")], origins)
origins[, dach_rate := ( dach / participants * 100)]
origins[, na_rate := (na / participants * 100)]
origins <- merge(origins[, c("seminar_id", "dach_rate", "na_rate")], seminars_dt[, c("seminar_id", "start_date")])
origins
ggplot(origins, aes(x=start_date)) +
geom_line(aes(y = dach_rate, group = 1, colour = "DACH")) +
geom_line(aes(y = na_rate, group = 1, colour = "NA")) +
labs(title = "Percentage of DACH vs NA Participants per Dagstuhl Seminar from 2001 to 2019",
x = "Year",
y = "% of Participants",
colour = "Legend") +
scale_colour_manual(values = c("red", "dodgerblue")) +
geom_smooth(data=origins %>% group_by(start_date) %>% summarise(dach_rate=sum(dach_rate)),
aes(x = start_date, y = dach_rate, group=1),
method = "lm", se= FALSE, color = "red3", size = 1) +
geom_smooth(data=origins %>% group_by(start_date) %>% summarise(na_rate=sum(na_rate)),
aes(x = start_date, y = na_rate, group=1),
method = "lm", se= FALSE, color = "dodgerblue3", size = 1) +
scale_y_continuous(expand = c(0.01,0.01))
